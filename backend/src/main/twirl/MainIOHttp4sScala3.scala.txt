@(groupId: String, addDocumentation: Boolean, addMetrics: Boolean)
package @groupId

import cats.effect.{ExitCode, IO, IOApp}
import com.comcast.ip4s.{Host, Port, port}
import org.http4s.ember.server.EmberServerBuilder
import org.http4s.server.Router
import sttp.tapir.server.http4s.@if(addMetrics){{Http4sServerInterpreter, Http4sServerOptions}}else{Http4sServerInterpreter}

object Main extends IOApp:

  override def run(args: List[String]): IO[ExitCode] =
    @if(addMetrics) {
    val serverOptions: Http4sServerOptions[IO] =
      Http4sServerOptions.customiseInterceptors[IO]
        .metricsInterceptor(Endpoints.prometheusMetrics.metricsInterceptor())
        .options
    val routes = Http4sServerInterpreter[IO](serverOptions).toRoutes(Endpoints.all)
    } else {
    val routes = Http4sServerInterpreter[IO]().toRoutes(Endpoints.all)
    }

    val port = sys.env
      .get("HTTP_PORT")
      .flatMap(_.toIntOption)
      .flatMap(Port.fromInt)
      .getOrElse(port"8080")

    EmberServerBuilder
      .default[IO]
      .withHost(Host.fromString("localhost").get)
      .withPort(port)
      .withHttpApp(Router("/" -> routes).orNotFound)
      .build
      .use: server =>
        for
          _ <- IO.println(s"@if(addDocumentation){Go to http://localhost:${server.address.getPort}/docs to open SwaggerUI. }else{Server started at http://localhost:${server.address.getPort}. }Press ENTER key to exit.")
          _ <- IO.readLine
        yield ()
      .as(ExitCode.Success)

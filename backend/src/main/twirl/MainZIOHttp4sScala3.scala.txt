@(groupId: String, addDocumentation: Boolean, addMetrics: Boolean)
package @groupId

import com.comcast.ip4s.{Host, Port, port}
import org.http4s.ember.server.EmberServerBuilder
import org.http4s.server.Router@if(addMetrics){
import sttp.tapir.server.http4s.Http4sServerOptions}
import sttp.tapir.server.http4s.ztapir.ZHttp4sServerInterpreter
import zio.interop.catz.*
import zio.{Scope, Task, ZIO, ZIOAppArgs, ZIOAppDefault, Console}

object Main extends ZIOAppDefault:

  override def run: ZIO[Any with ZIOAppArgs with Scope, Any, Any] =
    @if(addMetrics) {
    val serverOptions: Http4sServerOptions[Task] =
      Http4sServerOptions.customiseInterceptors[Task]
        .metricsInterceptor(Endpoints.prometheusMetrics.metricsInterceptor())
        .options
    val routes = ZHttp4sServerInterpreter(serverOptions).from(Endpoints.all).toRoutes[Any]
    } else {
    val routes = ZHttp4sServerInterpreter().from(Endpoints.all).toRoutes[Any]
    }

    val port = sys.env
      .get("HTTP_PORT")
      .flatMap(_.toIntOption)
      .flatMap(Port.fromInt)
      .getOrElse(port"8080")

    EmberServerBuilder
      .default[Task]
      .withHost(Host.fromString("localhost").get)
      .withPort(port)
      .withHttpApp(Router("/" -> routes).orNotFound)
      .build
      .use { server =>
        for {
          _ <- Console.printLine(s"@if(addDocumentation){Go to http://localhost:${server.address.getPort}/docs to open SwaggerUI. }else{Server started at http://localhost:${server.address.getPort}. }Press ENTER key to exit.")
          _ <- Console.readLine
        } yield ()
      }
